// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class OboTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final OboTokenArgs Empty = new OboTokenArgs();

    /**
     * Application ID of databricks.ServicePrincipal to create a PAT token for.
     * 
     */
    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    /**
     * @return Application ID of databricks.ServicePrincipal to create a PAT token for.
     * 
     */
    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * Comment that describes the purpose of the token.
     * 
     */
    @Import(name="comment", required=true)
    private Output<String> comment;

    /**
     * @return Comment that describes the purpose of the token.
     * 
     */
    public Output<String> comment() {
        return this.comment;
    }

    /**
     * The number of seconds before the token expires. Token resource is re-created when it expires.
     * 
     */
    @Import(name="lifetimeSeconds", required=true)
    private Output<Integer> lifetimeSeconds;

    /**
     * @return The number of seconds before the token expires. Token resource is re-created when it expires.
     * 
     */
    public Output<Integer> lifetimeSeconds() {
        return this.lifetimeSeconds;
    }

    private OboTokenArgs() {}

    private OboTokenArgs(OboTokenArgs $) {
        this.applicationId = $.applicationId;
        this.comment = $.comment;
        this.lifetimeSeconds = $.lifetimeSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OboTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OboTokenArgs $;

        public Builder() {
            $ = new OboTokenArgs();
        }

        public Builder(OboTokenArgs defaults) {
            $ = new OboTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Application ID of databricks.ServicePrincipal to create a PAT token for.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Application ID of databricks.ServicePrincipal to create a PAT token for.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param comment Comment that describes the purpose of the token.
         * 
         * @return builder
         * 
         */
        public Builder comment(Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Comment that describes the purpose of the token.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param lifetimeSeconds The number of seconds before the token expires. Token resource is re-created when it expires.
         * 
         * @return builder
         * 
         */
        public Builder lifetimeSeconds(Output<Integer> lifetimeSeconds) {
            $.lifetimeSeconds = lifetimeSeconds;
            return this;
        }

        /**
         * @param lifetimeSeconds The number of seconds before the token expires. Token resource is re-created when it expires.
         * 
         * @return builder
         * 
         */
        public Builder lifetimeSeconds(Integer lifetimeSeconds) {
            return lifetimeSeconds(Output.of(lifetimeSeconds));
        }

        public OboTokenArgs build() {
            $.applicationId = Objects.requireNonNull($.applicationId, "expected parameter 'applicationId' to be non-null");
            $.comment = Objects.requireNonNull($.comment, "expected parameter 'comment' to be non-null");
            $.lifetimeSeconds = Objects.requireNonNull($.lifetimeSeconds, "expected parameter 'lifetimeSeconds' to be non-null");
            return $;
        }
    }

}
