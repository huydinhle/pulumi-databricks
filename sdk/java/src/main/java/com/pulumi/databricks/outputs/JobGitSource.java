// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class JobGitSource {
    /**
     * @return name of the Git branch to use. Conflicts with `tag` and `commit`.
     * 
     */
    private final @Nullable String branch;
    /**
     * @return hash of Git commit to use. Conflicts with `branch` and `tag`.
     * 
     */
    private final @Nullable String commit;
    /**
     * @return case insensitive name of the Git provider.  Following values are supported right now (could be a subject for change, consult [Repos API documentation](https://docs.databricks.com/dev-tools/api/latest/repos.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`.
     * 
     */
    private final @Nullable String provider;
    /**
     * @return name of the Git branch to use. Conflicts with `branch` and `commit`.
     * 
     */
    private final @Nullable String tag;
    /**
     * @return URL of the job on the given workspace
     * 
     */
    private final String url;

    @CustomType.Constructor
    private JobGitSource(
        @CustomType.Parameter("branch") @Nullable String branch,
        @CustomType.Parameter("commit") @Nullable String commit,
        @CustomType.Parameter("provider") @Nullable String provider,
        @CustomType.Parameter("tag") @Nullable String tag,
        @CustomType.Parameter("url") String url) {
        this.branch = branch;
        this.commit = commit;
        this.provider = provider;
        this.tag = tag;
        this.url = url;
    }

    /**
     * @return name of the Git branch to use. Conflicts with `tag` and `commit`.
     * 
     */
    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }
    /**
     * @return hash of Git commit to use. Conflicts with `branch` and `tag`.
     * 
     */
    public Optional<String> commit() {
        return Optional.ofNullable(this.commit);
    }
    /**
     * @return case insensitive name of the Git provider.  Following values are supported right now (could be a subject for change, consult [Repos API documentation](https://docs.databricks.com/dev-tools/api/latest/repos.html)): `gitHub`, `gitHubEnterprise`, `bitbucketCloud`, `bitbucketServer`, `azureDevOpsServices`, `gitLab`, `gitLabEnterpriseEdition`.
     * 
     */
    public Optional<String> provider() {
        return Optional.ofNullable(this.provider);
    }
    /**
     * @return name of the Git branch to use. Conflicts with `branch` and `commit`.
     * 
     */
    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }
    /**
     * @return URL of the job on the given workspace
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobGitSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String branch;
        private @Nullable String commit;
        private @Nullable String provider;
        private @Nullable String tag;
        private String url;

        public Builder() {
    	      // Empty
        }

        public Builder(JobGitSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.branch = defaults.branch;
    	      this.commit = defaults.commit;
    	      this.provider = defaults.provider;
    	      this.tag = defaults.tag;
    	      this.url = defaults.url;
        }

        public Builder branch(@Nullable String branch) {
            this.branch = branch;
            return this;
        }
        public Builder commit(@Nullable String commit) {
            this.commit = commit;
            return this;
        }
        public Builder provider(@Nullable String provider) {
            this.provider = provider;
            return this;
        }
        public Builder tag(@Nullable String tag) {
            this.tag = tag;
            return this;
        }
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }        public JobGitSource build() {
            return new JobGitSource(branch, commit, provider, tag, url);
        }
    }
}
