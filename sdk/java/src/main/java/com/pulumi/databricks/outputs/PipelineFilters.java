// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class PipelineFilters {
    private final @Nullable List<String> excludes;
    private final @Nullable List<String> includes;

    @CustomType.Constructor
    private PipelineFilters(
        @CustomType.Parameter("excludes") @Nullable List<String> excludes,
        @CustomType.Parameter("includes") @Nullable List<String> includes) {
        this.excludes = excludes;
        this.includes = includes;
    }

    public List<String> excludes() {
        return this.excludes == null ? List.of() : this.excludes;
    }
    public List<String> includes() {
        return this.includes == null ? List.of() : this.includes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PipelineFilters defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> excludes;
        private @Nullable List<String> includes;

        public Builder() {
    	      // Empty
        }

        public Builder(PipelineFilters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.excludes = defaults.excludes;
    	      this.includes = defaults.includes;
        }

        public Builder excludes(@Nullable List<String> excludes) {
            this.excludes = excludes;
            return this;
        }
        public Builder excludes(String... excludes) {
            return excludes(List.of(excludes));
        }
        public Builder includes(@Nullable List<String> includes) {
            this.includes = includes;
            return this;
        }
        public Builder includes(String... includes) {
            return includes(List.of(includes));
        }        public PipelineFilters build() {
            return new PipelineFilters(excludes, includes);
        }
    }
}
