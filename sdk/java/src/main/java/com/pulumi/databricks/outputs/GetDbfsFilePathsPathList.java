// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDbfsFilePathsPathList {
    private final @Nullable Integer fileSize;
    /**
     * @return Path on DBFS for the file to perform listing
     * 
     */
    private final @Nullable String path;

    @CustomType.Constructor
    private GetDbfsFilePathsPathList(
        @CustomType.Parameter("fileSize") @Nullable Integer fileSize,
        @CustomType.Parameter("path") @Nullable String path) {
        this.fileSize = fileSize;
        this.path = path;
    }

    public Optional<Integer> fileSize() {
        return Optional.ofNullable(this.fileSize);
    }
    /**
     * @return Path on DBFS for the file to perform listing
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbfsFilePathsPathList defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer fileSize;
        private @Nullable String path;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDbfsFilePathsPathList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fileSize = defaults.fileSize;
    	      this.path = defaults.path;
        }

        public Builder fileSize(@Nullable Integer fileSize) {
            this.fileSize = fileSize;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }        public GetDbfsFilePathsPathList build() {
            return new GetDbfsFilePathsPathList(fileSize, path);
        }
    }
}
