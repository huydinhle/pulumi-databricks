// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SqlQueryScheduleDaily {
    private final Integer intervalDays;
    private final String timeOfDay;
    private final @Nullable String untilDate;

    @CustomType.Constructor
    private SqlQueryScheduleDaily(
        @CustomType.Parameter("intervalDays") Integer intervalDays,
        @CustomType.Parameter("timeOfDay") String timeOfDay,
        @CustomType.Parameter("untilDate") @Nullable String untilDate) {
        this.intervalDays = intervalDays;
        this.timeOfDay = timeOfDay;
        this.untilDate = untilDate;
    }

    public Integer intervalDays() {
        return this.intervalDays;
    }
    public String timeOfDay() {
        return this.timeOfDay;
    }
    public Optional<String> untilDate() {
        return Optional.ofNullable(this.untilDate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlQueryScheduleDaily defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer intervalDays;
        private String timeOfDay;
        private @Nullable String untilDate;

        public Builder() {
    	      // Empty
        }

        public Builder(SqlQueryScheduleDaily defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.intervalDays = defaults.intervalDays;
    	      this.timeOfDay = defaults.timeOfDay;
    	      this.untilDate = defaults.untilDate;
        }

        public Builder intervalDays(Integer intervalDays) {
            this.intervalDays = Objects.requireNonNull(intervalDays);
            return this;
        }
        public Builder timeOfDay(String timeOfDay) {
            this.timeOfDay = Objects.requireNonNull(timeOfDay);
            return this;
        }
        public Builder untilDate(@Nullable String untilDate) {
            this.untilDate = untilDate;
            return this;
        }        public SqlQueryScheduleDaily build() {
            return new SqlQueryScheduleDaily(intervalDays, timeOfDay, untilDate);
        }
    }
}
