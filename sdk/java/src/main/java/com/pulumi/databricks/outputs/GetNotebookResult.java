// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNotebookResult {
    /**
     * @return notebook content in selected format
     * 
     */
    private final String content;
    private final String format;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return notebook language
     * 
     */
    private final String language;
    /**
     * @return notebook object ID
     * 
     */
    private final Integer objectId;
    /**
     * @return notebook object type
     * 
     */
    private final String objectType;
    private final String path;

    @CustomType.Constructor
    private GetNotebookResult(
        @CustomType.Parameter("content") String content,
        @CustomType.Parameter("format") String format,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("language") String language,
        @CustomType.Parameter("objectId") Integer objectId,
        @CustomType.Parameter("objectType") String objectType,
        @CustomType.Parameter("path") String path) {
        this.content = content;
        this.format = format;
        this.id = id;
        this.language = language;
        this.objectId = objectId;
        this.objectType = objectType;
        this.path = path;
    }

    /**
     * @return notebook content in selected format
     * 
     */
    public String content() {
        return this.content;
    }
    public String format() {
        return this.format;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return notebook language
     * 
     */
    public String language() {
        return this.language;
    }
    /**
     * @return notebook object ID
     * 
     */
    public Integer objectId() {
        return this.objectId;
    }
    /**
     * @return notebook object type
     * 
     */
    public String objectType() {
        return this.objectType;
    }
    public String path() {
        return this.path;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNotebookResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String content;
        private String format;
        private String id;
        private String language;
        private Integer objectId;
        private String objectType;
        private String path;

        public Builder() {
    	      // Empty
        }

        public Builder(GetNotebookResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.format = defaults.format;
    	      this.id = defaults.id;
    	      this.language = defaults.language;
    	      this.objectId = defaults.objectId;
    	      this.objectType = defaults.objectType;
    	      this.path = defaults.path;
        }

        public Builder content(String content) {
            this.content = Objects.requireNonNull(content);
            return this;
        }
        public Builder format(String format) {
            this.format = Objects.requireNonNull(format);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder language(String language) {
            this.language = Objects.requireNonNull(language);
            return this;
        }
        public Builder objectId(Integer objectId) {
            this.objectId = Objects.requireNonNull(objectId);
            return this;
        }
        public Builder objectType(String objectType) {
            this.objectType = Objects.requireNonNull(objectType);
            return this;
        }
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }        public GetNotebookResult build() {
            return new GetNotebookResult(content, format, id, language, objectId, objectType, path);
        }
    }
}
