// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUserResult {
    /**
     * @return Alphanumeric representation of user local name. e.g. `mr_foo`.
     * 
     */
    private final String alphanumeric;
    private final String applicationId;
    /**
     * @return Display name of the user, e.g. `Mr Foo`.
     * 
     */
    private final String displayName;
    /**
     * @return ID of the user in an external identity provider.
     * 
     */
    private final String externalId;
    /**
     * @return Home folder of the user, e.g. `/Users/mr.foo@example.com`.
     * 
     */
    private final String home;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return Personal Repos location of the user, e.g. `/Repos/mr.foo@example.com`.
     * 
     */
    private final String repos;
    private final @Nullable String userId;
    /**
     * @return Name of the user, e.g. `mr.foo@example.com`.
     * 
     */
    private final @Nullable String userName;

    @CustomType.Constructor
    private GetUserResult(
        @CustomType.Parameter("alphanumeric") String alphanumeric,
        @CustomType.Parameter("applicationId") String applicationId,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("externalId") String externalId,
        @CustomType.Parameter("home") String home,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("repos") String repos,
        @CustomType.Parameter("userId") @Nullable String userId,
        @CustomType.Parameter("userName") @Nullable String userName) {
        this.alphanumeric = alphanumeric;
        this.applicationId = applicationId;
        this.displayName = displayName;
        this.externalId = externalId;
        this.home = home;
        this.id = id;
        this.repos = repos;
        this.userId = userId;
        this.userName = userName;
    }

    /**
     * @return Alphanumeric representation of user local name. e.g. `mr_foo`.
     * 
     */
    public String alphanumeric() {
        return this.alphanumeric;
    }
    public String applicationId() {
        return this.applicationId;
    }
    /**
     * @return Display name of the user, e.g. `Mr Foo`.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return ID of the user in an external identity provider.
     * 
     */
    public String externalId() {
        return this.externalId;
    }
    /**
     * @return Home folder of the user, e.g. `/Users/mr.foo@example.com`.
     * 
     */
    public String home() {
        return this.home;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Personal Repos location of the user, e.g. `/Repos/mr.foo@example.com`.
     * 
     */
    public String repos() {
        return this.repos;
    }
    public Optional<String> userId() {
        return Optional.ofNullable(this.userId);
    }
    /**
     * @return Name of the user, e.g. `mr.foo@example.com`.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String alphanumeric;
        private String applicationId;
        private String displayName;
        private String externalId;
        private String home;
        private String id;
        private String repos;
        private @Nullable String userId;
        private @Nullable String userName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alphanumeric = defaults.alphanumeric;
    	      this.applicationId = defaults.applicationId;
    	      this.displayName = defaults.displayName;
    	      this.externalId = defaults.externalId;
    	      this.home = defaults.home;
    	      this.id = defaults.id;
    	      this.repos = defaults.repos;
    	      this.userId = defaults.userId;
    	      this.userName = defaults.userName;
        }

        public Builder alphanumeric(String alphanumeric) {
            this.alphanumeric = Objects.requireNonNull(alphanumeric);
            return this;
        }
        public Builder applicationId(String applicationId) {
            this.applicationId = Objects.requireNonNull(applicationId);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder externalId(String externalId) {
            this.externalId = Objects.requireNonNull(externalId);
            return this;
        }
        public Builder home(String home) {
            this.home = Objects.requireNonNull(home);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder repos(String repos) {
            this.repos = Objects.requireNonNull(repos);
            return this;
        }
        public Builder userId(@Nullable String userId) {
            this.userId = userId;
            return this;
        }
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }        public GetUserResult build() {
            return new GetUserResult(alphanumeric, applicationId, displayName, externalId, home, id, repos, userId, userName);
        }
    }
}
