// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.databricks.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.databricks.outputs.GetSqlWarehouseChannel;
import com.pulumi.databricks.outputs.GetSqlWarehouseOdbcParams;
import com.pulumi.databricks.outputs.GetSqlWarehouseTags;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSqlWarehouseResult {
    /**
     * @return Time in minutes until an idle SQL warehouse terminates all clusters and stops.
     * 
     */
    private final Integer autoStopMins;
    private final GetSqlWarehouseChannel channel;
    /**
     * @return The size of the clusters allocated to the warehouse: &#34;2X-Small&#34;, &#34;X-Small&#34;, &#34;Small&#34;, &#34;Medium&#34;, &#34;Large&#34;, &#34;X-Large&#34;, &#34;2X-Large&#34;, &#34;3X-Large&#34;, &#34;4X-Large&#34;.
     * 
     */
    private final String clusterSize;
    /**
     * @return ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
     * 
     */
    private final String dataSourceId;
    /**
     * @return Whether to enable [Photon](https://databricks.com/product/delta-engine).
     * 
     */
    private final Boolean enablePhoton;
    /**
     * @return Whether this SQL warehouse is a Serverless warehouse. To use a Serverless SQL warehouse, you must enable Serverless SQL warehouses for the workspace.
     * * `channel` block, consisting of following fields:
     * 
     */
    private final Boolean enableServerlessCompute;
    private final String id;
    private final String instanceProfileArn;
    /**
     * @return JDBC connection string.
     * 
     */
    private final String jdbcUrl;
    /**
     * @return Maximum number of clusters available when a SQL warehouse is running.
     * 
     */
    private final Integer maxNumClusters;
    /**
     * @return Minimum number of clusters available when a SQL warehouse is running.
     * 
     */
    private final Integer minNumClusters;
    /**
     * @return Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
     * 
     */
    private final String name;
    private final Integer numClusters;
    /**
     * @return ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
     * 
     */
    private final GetSqlWarehouseOdbcParams odbcParams;
    /**
     * @return The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
     * 
     */
    private final String spotInstancePolicy;
    private final String state;
    /**
     * @return Databricks tags all warehouse resources with these tags.
     * 
     */
    private final GetSqlWarehouseTags tags;

    @CustomType.Constructor
    private GetSqlWarehouseResult(
        @CustomType.Parameter("autoStopMins") Integer autoStopMins,
        @CustomType.Parameter("channel") GetSqlWarehouseChannel channel,
        @CustomType.Parameter("clusterSize") String clusterSize,
        @CustomType.Parameter("dataSourceId") String dataSourceId,
        @CustomType.Parameter("enablePhoton") Boolean enablePhoton,
        @CustomType.Parameter("enableServerlessCompute") Boolean enableServerlessCompute,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("instanceProfileArn") String instanceProfileArn,
        @CustomType.Parameter("jdbcUrl") String jdbcUrl,
        @CustomType.Parameter("maxNumClusters") Integer maxNumClusters,
        @CustomType.Parameter("minNumClusters") Integer minNumClusters,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("numClusters") Integer numClusters,
        @CustomType.Parameter("odbcParams") GetSqlWarehouseOdbcParams odbcParams,
        @CustomType.Parameter("spotInstancePolicy") String spotInstancePolicy,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("tags") GetSqlWarehouseTags tags) {
        this.autoStopMins = autoStopMins;
        this.channel = channel;
        this.clusterSize = clusterSize;
        this.dataSourceId = dataSourceId;
        this.enablePhoton = enablePhoton;
        this.enableServerlessCompute = enableServerlessCompute;
        this.id = id;
        this.instanceProfileArn = instanceProfileArn;
        this.jdbcUrl = jdbcUrl;
        this.maxNumClusters = maxNumClusters;
        this.minNumClusters = minNumClusters;
        this.name = name;
        this.numClusters = numClusters;
        this.odbcParams = odbcParams;
        this.spotInstancePolicy = spotInstancePolicy;
        this.state = state;
        this.tags = tags;
    }

    /**
     * @return Time in minutes until an idle SQL warehouse terminates all clusters and stops.
     * 
     */
    public Integer autoStopMins() {
        return this.autoStopMins;
    }
    public GetSqlWarehouseChannel channel() {
        return this.channel;
    }
    /**
     * @return The size of the clusters allocated to the warehouse: &#34;2X-Small&#34;, &#34;X-Small&#34;, &#34;Small&#34;, &#34;Medium&#34;, &#34;Large&#34;, &#34;X-Large&#34;, &#34;2X-Large&#34;, &#34;3X-Large&#34;, &#34;4X-Large&#34;.
     * 
     */
    public String clusterSize() {
        return this.clusterSize;
    }
    /**
     * @return ID of the data source for this warehouse. This is used to bind an Databricks SQL query to an warehouse.
     * 
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }
    /**
     * @return Whether to enable [Photon](https://databricks.com/product/delta-engine).
     * 
     */
    public Boolean enablePhoton() {
        return this.enablePhoton;
    }
    /**
     * @return Whether this SQL warehouse is a Serverless warehouse. To use a Serverless SQL warehouse, you must enable Serverless SQL warehouses for the workspace.
     * * `channel` block, consisting of following fields:
     * 
     */
    public Boolean enableServerlessCompute() {
        return this.enableServerlessCompute;
    }
    public String id() {
        return this.id;
    }
    public String instanceProfileArn() {
        return this.instanceProfileArn;
    }
    /**
     * @return JDBC connection string.
     * 
     */
    public String jdbcUrl() {
        return this.jdbcUrl;
    }
    /**
     * @return Maximum number of clusters available when a SQL warehouse is running.
     * 
     */
    public Integer maxNumClusters() {
        return this.maxNumClusters;
    }
    /**
     * @return Minimum number of clusters available when a SQL warehouse is running.
     * 
     */
    public Integer minNumClusters() {
        return this.minNumClusters;
    }
    /**
     * @return Name of the Databricks SQL release channel. Possible values are: `CHANNEL_NAME_PREVIEW` and `CHANNEL_NAME_CURRENT`. Default is `CHANNEL_NAME_CURRENT`.
     * 
     */
    public String name() {
        return this.name;
    }
    public Integer numClusters() {
        return this.numClusters;
    }
    /**
     * @return ODBC connection params: `odbc_params.hostname`, `odbc_params.path`, `odbc_params.protocol`, and `odbc_params.port`.
     * 
     */
    public GetSqlWarehouseOdbcParams odbcParams() {
        return this.odbcParams;
    }
    /**
     * @return The spot policy to use for allocating instances to clusters: `COST_OPTIMIZED` or `RELIABILITY_OPTIMIZED`.
     * 
     */
    public String spotInstancePolicy() {
        return this.spotInstancePolicy;
    }
    public String state() {
        return this.state;
    }
    /**
     * @return Databricks tags all warehouse resources with these tags.
     * 
     */
    public GetSqlWarehouseTags tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSqlWarehouseResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer autoStopMins;
        private GetSqlWarehouseChannel channel;
        private String clusterSize;
        private String dataSourceId;
        private Boolean enablePhoton;
        private Boolean enableServerlessCompute;
        private String id;
        private String instanceProfileArn;
        private String jdbcUrl;
        private Integer maxNumClusters;
        private Integer minNumClusters;
        private String name;
        private Integer numClusters;
        private GetSqlWarehouseOdbcParams odbcParams;
        private String spotInstancePolicy;
        private String state;
        private GetSqlWarehouseTags tags;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSqlWarehouseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoStopMins = defaults.autoStopMins;
    	      this.channel = defaults.channel;
    	      this.clusterSize = defaults.clusterSize;
    	      this.dataSourceId = defaults.dataSourceId;
    	      this.enablePhoton = defaults.enablePhoton;
    	      this.enableServerlessCompute = defaults.enableServerlessCompute;
    	      this.id = defaults.id;
    	      this.instanceProfileArn = defaults.instanceProfileArn;
    	      this.jdbcUrl = defaults.jdbcUrl;
    	      this.maxNumClusters = defaults.maxNumClusters;
    	      this.minNumClusters = defaults.minNumClusters;
    	      this.name = defaults.name;
    	      this.numClusters = defaults.numClusters;
    	      this.odbcParams = defaults.odbcParams;
    	      this.spotInstancePolicy = defaults.spotInstancePolicy;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
        }

        public Builder autoStopMins(Integer autoStopMins) {
            this.autoStopMins = Objects.requireNonNull(autoStopMins);
            return this;
        }
        public Builder channel(GetSqlWarehouseChannel channel) {
            this.channel = Objects.requireNonNull(channel);
            return this;
        }
        public Builder clusterSize(String clusterSize) {
            this.clusterSize = Objects.requireNonNull(clusterSize);
            return this;
        }
        public Builder dataSourceId(String dataSourceId) {
            this.dataSourceId = Objects.requireNonNull(dataSourceId);
            return this;
        }
        public Builder enablePhoton(Boolean enablePhoton) {
            this.enablePhoton = Objects.requireNonNull(enablePhoton);
            return this;
        }
        public Builder enableServerlessCompute(Boolean enableServerlessCompute) {
            this.enableServerlessCompute = Objects.requireNonNull(enableServerlessCompute);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder instanceProfileArn(String instanceProfileArn) {
            this.instanceProfileArn = Objects.requireNonNull(instanceProfileArn);
            return this;
        }
        public Builder jdbcUrl(String jdbcUrl) {
            this.jdbcUrl = Objects.requireNonNull(jdbcUrl);
            return this;
        }
        public Builder maxNumClusters(Integer maxNumClusters) {
            this.maxNumClusters = Objects.requireNonNull(maxNumClusters);
            return this;
        }
        public Builder minNumClusters(Integer minNumClusters) {
            this.minNumClusters = Objects.requireNonNull(minNumClusters);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder numClusters(Integer numClusters) {
            this.numClusters = Objects.requireNonNull(numClusters);
            return this;
        }
        public Builder odbcParams(GetSqlWarehouseOdbcParams odbcParams) {
            this.odbcParams = Objects.requireNonNull(odbcParams);
            return this;
        }
        public Builder spotInstancePolicy(String spotInstancePolicy) {
            this.spotInstancePolicy = Objects.requireNonNull(spotInstancePolicy);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder tags(GetSqlWarehouseTags tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }        public GetSqlWarehouseResult build() {
            return new GetSqlWarehouseResult(autoStopMins, channel, clusterSize, dataSourceId, enablePhoton, enableServerlessCompute, id, instanceProfileArn, jdbcUrl, maxNumClusters, minNumClusters, name, numClusters, odbcParams, spotInstancePolicy, state, tags);
        }
    }
}
